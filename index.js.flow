/**
 * https://github.com/atmulyana/reactjs-common
 * 
 * @flow
 */
import * as React from 'react';

/**
 * Example usage:
 *      type ViewProps = $Call<ExtractComponentPropsInstance, typeof View>['props'];
 *      type ViewInstance = $Call<ExtractComponentPropsInstance, typeof View>['instance'];
 * Then, if you want to get View style prop type
 *      type ViewStyleProp = $NonMaybeType<ViewProps['style']>;
 **/
export type ExtractComponentPropsInstance = <Props, Instance>(React.AbstractComponent<Props, Instance>) => {props: Props, instance: Instance};

export type RefObject<Instance> = {current: Instance | null, ...};
export type RefCallback<Instance> = ((Instance | null) => mixed);
export type Ref<Instance> = RefCallback<Instance> | RefObject<Instance> | null;

declare export function setRef<Instance>(
    refProp: Ref<Instance>,
    ref: Instance | null
): void;

declare export const extRefCallback:
    (
        <T: ?{...}, P: ?{...}>(
            refProp: Ref<{...$Exact<T>, ...$Exact<P>}>,
            extRef: P,
            callback?: ({...$Exact<T>, ...$Exact<P>}) => mixed,
        ) => RefCallback<T>
    ) & (
            <T, P>(
            refProp: Ref<T & P>,
            extRef: P,
            callback?: (T & P) => mixed,
        ) => RefCallback<T>
    );